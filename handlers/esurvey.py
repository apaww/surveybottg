import re
from contextlib import suppress
from aiogram import Router, types, Bot, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command, CommandObject
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from keyboards import reply, inline_esurvey
from aiogram.types import FSInputFile
from data import db
from datetime import date
import csv

router = Router()


class EditSurvey(StatesGroup):
    new_name = State()
    new_questions = State()
    delete_survey = State()


@router.message(StateFilter(None), Command(commands=["edit", "–∏–∑–º–µ–Ω–∏—Ç—å"], ignore_case=True))
async def command_surveys_handler(message: types.Message, bot: Bot, state: FSMContext) -> None:
    if len(message.text.split()) == 1:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É!\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –≤–≤–µ–¥–∏—Ç–µ <code>/–∏–∑–º–µ–Ω–∏—Ç—å {id}</code>", reply_markup=reply.menu_kb)
        return
    try:
        ssid = int(message.text.split()[1])
    except Exception:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É!\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –≤–≤–µ–¥–∏—Ç–µ <code>/–∏–∑–º–µ–Ω–∏—Ç—å {id}</code>", reply_markup=reply.menu_kb)
        return
    parsed = db.get_survey(ssid)
    if not len(parsed):
        await message.answer("–¢–∞–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üò¢\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –≤–≤–µ–¥–∏—Ç–µ <code>/–∏–∑–º–µ–Ω–∏—Ç—å {id}</code>", reply_markup=reply.menu_kb)
    elif parsed[2] != message.from_user.id:
        await message.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –æ–ø—Ä–æ—Å! üò¢\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –≤–≤–µ–¥–∏—Ç–µ <code>/–∏–∑–º–µ–Ω–∏—Ç—å {id}</code>", reply_markup=reply.menu_kb)
    else:
        await state.update_data(sid=ssid)
        st = '\n'.join(
            [f'{i + 1}. {parsed[4].split("|")[i]}' for i in range(len(parsed[4].split("|")))])
        await message.answer(f"‚ùì –í–æ–ø—Ä–æ—Å—ã:\n{st}")
        await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ä–æ—Å–µ üìÉ\n–ù–∞–∑–≤–∞–Ω–∏–µ: {parsed[1]}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {parsed[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä—Å–æ–≤: {len(parsed[4].split('|'))}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(db.get_answers_by_sid(ssid))}\nId: {parsed[0]}", reply_markup=inline_esurvey.paginator(sid=ssid))


@router.callback_query(inline_esurvey.Pagination.filter(F.action.in_(['edit'])))
async def pagination_handler(call: CallbackQuery, bot: Bot, callback_data: inline_esurvey.Pagination) -> None:
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, f"üìú –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:\nüí´ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –æ–ø—Ä–æ—Å–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞, –Ω–∞–∂–º–∏—Ç–µ <code>—Å—Ç–æ–ø ‚õî</code> –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
                           reply_markup=reply.survey_kb)
    await state.set_state(EditSurvey.new_name)


@router.message(EditSurvey.new_name)
async def get_name(message: types.Message, state: FSMContext) -> None:
    if message.text == '—Å—Ç–æ–ø ‚õî':
        await state.clear()
        await message.answer(f"–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω!", reply_markup=reply.menu_kb)
        return
    await state.update_data(name=message.text.strip())
    await message.answer(
        "üìú –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>{–Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞}. {–≤–æ–ø—Ä–æ—Å}</code>.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n1. –í–∞—à –ø–æ–ª\n2. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?\n–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞, –Ω–∞–∂–º–∏—Ç–µ <code>—Å—Ç–æ–ø ‚õî</code> –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=reply.survey_kb)
    await state.set_state(EditSurvey.new_questions)


@router.message(EditSurvey.new_questions)
async def get_questions(message: types.Message, state: FSMContext) -> None:
    if message.text == '—Å—Ç–æ–ø ‚õî':
        await state.clear()
        await message.answer(f"–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω!", reply_markup=reply.menu_kb)
        return
    questions = re.split(r'[0-9]+\.+', message.text.replace('\n', ''))
    questions = [question.strip() for question in questions[1:]]
    if (len(questions) == 0):
        await message.answer(f"‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞!",
                             reply_markup=reply.menu_kb)
        await state.clear()
        return

    data = await state.get_data()
    name = data['name']
    sid = data['sid']
    today = date.today()
    db.change_survey(sid, name, questions)
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –æ–ø—Ä–æ—Å! ü•≥\nid –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞: {sid}", reply_markup=reply.menu_kb)
    await state.clear()


@router.callback_query(inline_esurvey.Pagination.filter(F.action.in_(['export'])))
async def pagination_handler(call: CallbackQuery, bot: Bot, callback_data: inline_esurvey.Pagination) -> None:
    await bot.answer_callback_query(call.id)
    sid = int(callback_data.sid)
    fileName = f'./data/answers/{sid}.csv'
    answers = db.get_answers_by_sid(sid)
    survey = db.get_survey(sid)
    questions = survey[4].replace(';', '')
    data = []

    data.append({
        'user': survey[1].replace(';', ''),
        'answers': questions
    })

    for answer in answers:
        uanswers = answer[1].replace(';', '')
        data.append({
            'user': str(answer[0]).replace(';', ''),
            'answers': uanswers
        })

    with open(fileName, 'w', newline='', encoding="utf8") as f:
        writer = csv.DictWriter(
            f, fieldnames=list(data[0].keys()),
            delimiter=';')
        writer.writeheader()
        for d in data:
            writer.writerow(d)

    file = FSInputFile(fileName)

    await bot.send_message(call.from_user.id, f"üìÉ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à –æ–ø—Ä–æ—Å –±—ã–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ csv —Ñ–∞–π–ª!\nüí´ –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤, –≤–æ –≤—Ç–æ—Ä–æ–π - –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –≤–æ–ø—Ä–æ—Å—ã, –¥–∞–ª–µ–µ –∏–¥—É—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º id",
                           reply_markup=reply.menu_kb)
    await bot.send_document(call.from_user.id, file)
    await state.clear()


@router.callback_query(inline_esurvey.Pagination.filter(F.action.in_(['delete'])))
async def pagination_handler(call: CallbackQuery, bot: Bot, callback_data: inline_esurvey.Pagination) -> None:
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞\n–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞, –≤–≤–µ–¥–∏—Ç–µ <code>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é</code> —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!", reply_markup=reply.menu_kb)
    await state.set_state(EditSurvey.delete_survey)


@router.message(EditSurvey.delete_survey)
async def get_sure(message: types.Message, state: FSMContext) -> None:
    sid = int(callback_data.sid)
    if message.text == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        await state.clear()
        db.delete_survey(sid)
        await message.answer(f"üóëÔ∏è –û–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω!", reply_markup=reply.menu_kb)
        return
    await message.answer(
        "–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å—ã –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω!",
        reply_markup=reply.menu_kb)
    await state.clear()
