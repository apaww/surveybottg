import re
from contextlib import suppress
from aiogram import Router, types, Bot, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command, CommandObject
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from keyboards import reply, inline_survey
from data import db

router = Router()


class AnswerSurvey(StatesGroup):
    answering_the_survey = State()


@router.message(StateFilter(None), Command(commands=["survey", "–æ–ø—Ä–æ—Å"], ignore_case=True))
async def command_surveys_handler(message: types.Message, bot: Bot, state: FSMContext) -> None:
    if len(message.text.split()) == 1:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É!\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –≤–≤–µ–¥–∏—Ç–µ <code>/–æ–ø—Ä–æ—Å {id}</code>", reply_markup=reply.menu_kb)
        return
    try:
        ssid = int(message.text.split()[1])
    except Exception:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É!\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –≤–≤–µ–¥–∏—Ç–µ <code>/–æ–ø—Ä–æ—Å {id}</code>", reply_markup=reply.menu_kb)
        return
    parsed = db.get_survey(ssid)
    if not len(parsed):
        await message.answer("–¢–∞–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üò¢\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ –≤–≤–µ–¥–∏—Ç–µ <code>/–æ–ø—Ä–æ—Å {id}</code>", reply_markup=reply.menu_kb)
    else:
        await state.update_data(sid=ssid)
        await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ä–æ—Å–µ üìÉ\n–ù–∞–∑–≤–∞–Ω–∏–µ: {parsed[1]}\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {parsed[3]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä—Å–æ–≤: {len(parsed[4].split('|'))}\nId: {parsed[0]}", reply_markup=inline_survey.paginator())


@router.callback_query(inline_survey.Pagination.filter(F.action.in_(['start'])))
async def pagination_handler(call: CallbackQuery, bot: Bot, callback_data: inline_survey.Pagination, state: FSMContext) -> None:
    await bot.answer_callback_query(call.id)
    data = await state.get_data()
    ssid = data['sid']

    if ssid in db.get_answer_by_uid(call.from_user.id):
        await bot.send_message(call.from_user.id, "‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å!", reply_markup=reply.menu_kb)
        await state.clear()
        return
    parsed = db.get_survey(ssid)[4].split('|')
    st = '\n'.join([f'{i + 1}. {parsed[i]}' for i in range(len(parsed))])
    await bot.send_message(call.from_user.id, "üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>{–Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞}. {–æ—Ç–≤–µ—Ç}</code>.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n1. –î–∞\n2. 25 –ª–µ—Ç\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞, –Ω–∞–∂–º–∏—Ç–µ <code>—Å—Ç–æ–ø ‚õî</code> –≤ –º–µ–Ω—é –Ω–∏–∂–µ.")
    await bot.send_message(call.from_user.id, f"‚ùì –í–æ–ø—Ä–æ—Å—ã:\n{st}", reply_markup=reply.survey_kb)
    await state.set_state(AnswerSurvey.answering_the_survey)


@router.message(AnswerSurvey.answering_the_survey)
async def get_answer(message: types.Message, state: FSMContext) -> None:
    if message.text == '—Å—Ç–æ–ø ‚õî':
        await state.clear()
        await message.answer(f"–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ!", reply_markup=reply.menu_kb)
        return
    data = await state.get_data()
    sid = data['sid']
    answers = re.split(r'[0-9]+\.+', message.text.replace('\n', ''))
    answers = [answer.strip() for answer in answers[1:]]
    if (len(answers) == 0) or (len(answers) != len(db.get_survey(sid)[4].split('|'))):
        await message.answer(f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞!", reply_markup=inline_survey.paginator(message, sid))
        await state.clear()
        return

    db.create_answer(sid, message.from_user.id, answers)
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å! ü•≥", reply_markup=reply.menu_kb)
    await state.clear()
