import re
from aiogram import Router, types, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command
from keyboards import reply
from data import db
from datetime import date

router = Router()


class CreateSurvey(StatesGroup):
    get_name = State()
    get_questions = State()
    created_survey = State()


@router.message(StateFilter(None), Command(commands=["create", "—Å–æ–∑–¥–∞—Ç—å"], ignore_case=True))
async def command_surveys_handler(message: types.Message, bot: Bot, state: FSMContext) -> None:
    await message.answer(
        f"üìú –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:\nüí´ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–ø—Ä–æ—Å–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞, –Ω–∞–∂–º–∏—Ç–µ <code>—Å—Ç–æ–ø ‚õî</code> –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=reply.survey_kb)
    await state.set_state(CreateSurvey.get_name)


@router.message(CreateSurvey.get_name)
async def get_name(message: types.Message, state: FSMContext) -> None:
    if message.text == '—Å—Ç–æ–ø ‚õî':
        await state.clear()
        await message.answer(f"–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω!", reply_markup=reply.menu_kb)
        return
    await state.update_data(name=message.text.strip())
    await message.answer(
        "üìú –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>{–Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞}. {–≤–æ–ø—Ä–æ—Å}</code>.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n1. –í–∞—à –ø–æ–ª\n2. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?\n–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞, –Ω–∞–∂–º–∏—Ç–µ <code>—Å—Ç–æ–ø ‚õî</code> –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=reply.survey_kb)
    await state.set_state(CreateSurvey.get_questions)


@router.message(CreateSurvey.get_questions)
async def get_questions(message: types.Message, state: FSMContext) -> None:
    if message.text == '—Å—Ç–æ–ø ‚õî':
        await state.clear()
        await message.answer(f"–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω!", reply_markup=reply.menu_kb)
        return
    questions = re.split(r'[0-9]+\.+', message.text.replace('\n', ''))
    questions = [question.strip() for question in questions[1:]]
    if (len(questions) == 0):
        await message.answer(f"–í—ã –≤–≤–µ–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞!",
                             reply_markup=reply.menu_kb)
        await state.clear()
        return

    data = await state.get_data()
    name = data['name']
    today = date.today()
    sid = db.create_survey(name, message.from_user.id,
                           str(today.strftime("%m/%d/%y")), questions)
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –æ–ø—Ä–æ—Å! ü•≥\nid —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞: {sid}", reply_markup=reply.menu_kb)
    await state.clear()
